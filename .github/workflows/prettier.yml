name: Format Files

on:
  workflow_dispatch:
  #Runs at 01:01 UTC
  schedule:
    - cron: "1 1 * * *"

concurrency:
  group: "master-branch"

jobs:
  format:
    runs-on: ubuntu-latest
    name: Format Files
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      # Install dependencies for backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      # Run Prettier for backend
      - name: Format backend files
        run: |
          cd backend
          npm run format

      # Install dependencies for frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      # Run Prettier for frontend
      - name: Format frontend files
        run: |
          cd frontend
          npm run format

      # Commit changes if any
      - uses: stefanzweifel/git-auto-commit-action@v4
        id: format-files
        with:
          commit_message: "chore(style): format files"
          skip_checkout: true
          branch: "formatting-${{ github.sha }}"
          create_branch: true
          
      # Push the branch explicitly to ensure changes are available
      - name: Push formatting branch
        if: steps.format-files.outputs.changes_detected == 'true'
        run: git push origin formatting-${{ github.sha }} --force
          
      # Create PR using GitHub CLI if files were formatted
      - name: Create PR with formatted files
        if: steps.format-files.outputs.changes_detected == 'true'
        id: create-pr
        run: |
          # Ensure we have the latest changes
          git fetch origin formatting-${{ github.sha }}:formatting-${{ github.sha }}
          git checkout formatting-${{ github.sha }}
          
          # Check if there are actual differences between branches
          if git diff --quiet main..formatting-${{ github.sha }}; then
            echo "No differences found between branches, skipping PR creation"
          else
            gh pr create --base main --head formatting-${{ github.sha }} --title 'Merge formatting into main' --body 'Created by Github action'
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Merge PR using GitHub CLI only if PR was created
      - name: Merge PR with adjusted formatting
        if: steps.create-pr.outcome == 'success' && steps.format-files.outputs.changes_detected == 'true'
        id: merge-pr
        run: |
          # Find the PR number for the formatting branch
          PR_NUMBER=$(gh pr list --head formatting-${{ github.sha }} --json number --jq '.[0].number')
          
          # Only try to merge if a PR number is found
          if [ -n "$PR_NUMBER" ]; then
            gh pr merge $PR_NUMBER --admin --merge --subject 'Merge formatting' --delete-branch
          else
            echo "No PR found to merge"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
